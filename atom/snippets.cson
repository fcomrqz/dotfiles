'.source.js':
  # JavaScript: Console
  'console.log':
    prefix: 'cl'
    body: 'console.log($1)'
  'debugger':
    prefix: 'de'
    body: '''
    debugger
    '''
  'Show value':
    prefix: '?'
    body: '/* ? */'
  # # JavaScript: DOM
  # 'addEventListener':
  #   prefix: 'ae'
  #   body: '''
  #   ${1:document}.addEventListener('${2:event}', function(e) {
  #   \t${0:// body...}
  #   })
  #   '''
  # 'getAttribute':
  #   prefix: 'ga'
  #   body: '''
  #   ${1:document}.getAttribute('${2:attr}')
  #   '''
  # 'removeAttribute':
  #     prefix: 'rea'
  #     body: '''
  #     ${1:document}.removeAttribute('${2:attr}')
  #     '''
  # 'setAttribute':
  #   prefix: 'sa'
  #   body: '''
  #   ${1:document}.setAttribute('${2:attr}', ${3:value})
  #   '''
  # 'appendChild':
  #   prefix: 'ac'
  #   body: '''
  #   ${1:document}.appendChild(${2:elem})
  #   '''
  # 'removeChild':
  #   prefix: 'rec'
  #   body: '''
  #   ${1:document}.removeChild(${2:elem})
  #   '''
  # 'classList.add':
  #   prefix: 'ca'
  #   body: '''
  #   ${1:document}.classList.add('${2:class}')
  #   '''
  # 'classList.remove':
  #   prefix: 'cr'
  #   body: '''
  #   ${1:document}.classList.remove('${2:class}')
  #   '''
  # 'classList.toggle':
  #   prefix: 'ct'
  #   body: '''
  #   ${1:document}.classList.toggle('${2:class}')
  #   '''
  # 'createDocumentFragment':
  #   prefix: 'cdf'
  #   body: '''
  #   ${1:document}.createDocumentFragment()
  #   '''
  # 'createElement':
  #   prefix: 'cel'
  #   body: '''
  #   ${1:document}.createElement(${2:elem})
  #   '''
  # 'getElementsByClassName':
  #   prefix: 'gc'
  #   body: '''
  #   ${1:document}.getElementsByClassName('${2:class}')
  #   '''
  # 'getElementById':
  #   prefix: 'gi'
  #   body: '''
  #   ${1:document}.getElementById('${2:id}')
  #   '''
  # 'getElementsByTagName':
  #   prefix: 'gt'
  #   body: '''
  #   ${1:document}.getElementsByTagName('${2:tag}')
  #   '''
  # 'querySelector':
  #   prefix: 'qs'
  #   body: '''
  #   ${1:document}.querySelector('${2:selector}')
  #   '''
  # 'querySelectorAll':
  #   prefix: 'qsa'
  #   body: '''
  #   ${1:document}.querySelectorAll('${2:selector}')
  #   '''
  # 'textContent':
  #   prefix: 'textContent'
  #   body: '''
  #   ${1:document}.textContent = '${2:content}'
  #   '''
  # JavaScript: Array
  'reduce':
    prefix: 're'
    body: '''
    ${1:array}.reduce((${2:accumulator},${3:element}) => {
    \t${5:// body...}
    }, ${4:initialValue})
    '''
  'forEach':
    prefix: 'fe'
    body: '''
    ${1:myArray}.forEach(function(${2:elem}) {
    \t${0:// body...}
    })
    '''
  'for in':
    prefix: 'fi'
    body: '''
    for (${1:prop} in ${2:obj}) {
    \tif (${2:obj}.hasOwnProperty(${1:prop})) {
    \t\t${0:// body...}
    \t}
    }
    '''
  # JavaScript: Timer
  'setTimeout':
    prefix: 'st'
    body: '''
    setTimeout(function() {
    \t${0:// body...}
    }, ${1:delay})
    '''
  'setInterval':
    prefix: 'si'
    body: '''
    setInterval(function() {
    \t${0:// body...}
    }, ${1:delay})
    '''
  # JavaScript: Functions
  'function':
    prefix: 'fn'
    body: '''
    function ${1:methodName} (${2:arguments}) {
    \t${0:// body...}
    }
    '''
  'arrow function':
    prefix: 'af'
    body: '''
    (${1}) => ${0}
    '''
  'named arrow function':
    prefix: 'afn'
    body: '''
    const ${1:name} = (${2:arguments}) => ${3:// body}
    '''
  'function apply':
    prefix: 'apply'
    body: '''
    ${1:methodName}.apply(${2:context}, [${3:arguments}])
    '''
  'function call':
    prefix: 'call'
    body: '''
    ${1:methodName}.call(${2:context}, ${3:arguments})
    '''
  'immediately-invoked function expression':
    prefix: 'iife'
    body: '''
    (function(${1:window}, ${2:document}) {
    \t${0:// body...}
    })(${1:window}, ${2:document})
    '''
  'function as a property of an object':
    prefix: 'ofn'
    body: '''
    ${1:functionName}(${2:arguments}) {
    \t${3}
    },
    '''
  # JavaScript: JSON
  'JSON.parse':
    prefix: 'jp'
    body: 'JSON.parse(${1:obj})'
  'JSON.stringify':
    prefix: 'js'
    body: 'JSON.stringify(${1:obj})'
  # JavaScript: Miscellaneus
  'use strict':
    prefix: 'us'
    body: '''
    'use strict'
    '''
  'import':
    prefix: 'i'
    body: '''
    import ${1:module} from '${2:location}'
    '''
  'export':
    prefix: 'e'
    body: '''
    export ${1:name}
    '''
  # JavaScript: Node
  'module.exports':
    prefix: 'me'
    body: '''
    module.exports = ${1:name}
    '''
  'require':
    prefix: 'req'
    body: '''
    require('${1:module}')
    '''
  'process.exit':
    prefix: 'pe'
    body: '''
    process.exit(${1:code})
    '''
  # Jest: Jest
  'jest.clearAllTimers()':
    prefix: 'jcleartimers'
    body: 'jest.clearAllTimers()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/mock-function-api.html#mockfnmockclear'
  'jest.clearAllMocks()':
    prefix: 'jclearmocks'
    body: 'jest.clearAllMocks()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/mock-function-api.html#jestclearallmocks'
  'jest.disableAutomock()':
    prefix: 'jdisableautomock'
    body: 'jest.disableAutomock()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#disableutomock'
  'jest.doMock(moduleName, factory, options)':
    prefix: 'jdomo'
    body: 'jest.doMock($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestdomockmodulename-factory-options'
  'jest.dontMock(moduleName)':
    prefix: 'jdonmo'
    body: 'jest.dontMock($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestdontmockmodulename'
  'jest.enableAutomock()':
    prefix: 'jenableautomock'
    body: 'jest.enableAutomock()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#enableautomock'
  'jest.fn()':
    prefix: 'jfn'
    body: 'jest.fn($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestfnimplementation'
  'jest.genMockFromModule(moduleName)':
    prefix: 'jgenmock'
    body: 'jest.genMockFromModule($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestgenmockfrommodulemodulename'
  'jest.isMockFunction(fn)':
    prefix: 'jismock'
    body: 'jest.isMockFunction($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestismockfunctionfn'
  'jest.mock(moduleName, factory, options)':
    prefix: 'jmock'
    body: 'jest.mock($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestmockmodulename-factory-options'
  'jest.resetAllMocks()':
    prefix: 'jresetallmocks'
    body: 'jest.resetAllMocks()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestresetallmocks'
  'jest.resetModules()':
    prefix: 'jresetmodules'
    body: 'jest.resetModules()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestresetmodules'
  'jest.restoreAllMocks()':
    prefix: 'jrestore'
    body: 'jest.restoreAllMocks()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestrestoreallmocks'
  'jest.runAllTicks()':
    prefix: 'jrunticks'
    body: 'jest.runAllTicks()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestrunallticks'
  'jest.runAllTimers()':
    prefix: 'jruntimers'
    body: 'jest.runAllTimers()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestrunalltimers'
  'jest.runOnlyPendingTimers()':
    prefix: 'jrunpendtimers'
    body: 'jest.runOnlyPendingTimers()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestrunonlypendingtimers'
  'jest.setMock(moduleName, moduleExports)':
    prefix: 'jsetmock'
    body: 'jest.setMock($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestsetmockmodulename-moduleexports'
  'jest.spyOn(object, method)':
    prefix: 'jspy'
    body: 'jest.spyOn($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestspyonobject-methodname'
  'jest.unmock(moduleName)':
    prefix: 'junmock'
    body: 'jest.unmock($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestunmockmodulename'
  'jest.useFakeTimers()':
    prefix: 'jfaketimers'
    body: 'jest.useFakeTimers($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestusefaketimers'
  'jest.useRealTimers()':
    prefix: 'jrealtimers'
    body: 'jest.useRealTimers($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#jestuserealtimers'
  'jest.advanceTimersByTime()':
    prefix: 'jadvanceTimers'
    body: 'jest.advanceTimersByTime($1)'
    descriptionMoreURL: 'https://jestjs.io/docs/en/timer-mocks#advance-timers-by-time'
  # Jest: Globals
  'afterAll(fn)':
    prefix: 'afa'
    body: '''
      afterAll(() => {
        $1
      })
    '''
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/api.html#afterallfn'
  'afterEach(fn)':
    prefix: 'afe'
    body: '''
      afterEach(() => {
        $1
      })
    '''
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/api.html#aftereachfn'
  'beforeAll(fn)':
    prefix: 'beforea'
    body: '''
      beforeAll(() => {
        $1
      })
    '''
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/api.html#beforeallfn'
  'beforeEach(fn)':
    prefix: 'beforee'
    body: '''
      beforeEach(() => {
        $1
      })
    '''
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/api.html#beforeeachfn'
  'describe(name, fn)':
    prefix: 'desc'
    body: '''
      describe('$1', () => {
        $2
      })
    '''
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/api.html#describename-fn'
  'it(name, fn)':
    prefix: 'it'
    body: '''
      it('$1', () => {
        $2
      })
    '''
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/api.html#testname-fn'
  'test(name, fn)':
    prefix: 't'
    body: '''
      test('$1', () => {
        $2
      })
    '''
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/api.html#testname-fn'
  'test.todo(name)':
    prefix: 'tt'
    body: '''
    test.todo('$1')
    '''
  'test.each`table`(name, fn)':
    prefix: 'te'
    body: '''
      test.each`
      $1 |
      \$\{$2\} |
      `('$3', () => {
        $4
      })
    '''
    descriptionMoreURL: 'https://jestjs.io/docs/en/api#testeachtablename-fn-timeout'
  # Jest: Matchers
  '.not':
    prefix: 'enot'
    body: 'expect($1).not'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#not'
  '.resolves':
    prefix: 'eres'
    body: 'expect($1).resolves'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#resolves'
  '.rejects':
    prefix: 'erej'
    body: 'expect($1).rejects'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#rejects'
  '.toBe(value)':
    prefix: 'ebe'
    body: 'expect($1).toBe($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tobevalue'
  '.toBeCloseTo(number, number)':
    prefix: 'ecloseto'
    body: 'expect($1).toBeCloseTo($2, $3)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tobeclosetonumber-numdigits'
  '.toBeDefined()':
    prefix: 'edef'
    body: 'expect($1).toBeDefined()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tobedefined'
  '.toBeFalsy()':
    prefix: 'efalsy'
    body: 'expect($1).toBeFalsy()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tobefalsy'
  '.toBeGreaterThan(number)':
    prefix: 'egreater'
    body: 'expect($1).toBeGreaterThan($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tobegreaterthannumber'
  '.toBeGreaterThanOrEqual(number)':
    prefix: 'egreateror'
    body: 'expect($1).toBeGreaterThanOrEqual($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tobelessthanorequalnumber'
  '.toBeInstanceOf(Class)':
    prefix: 'einst'
    body: 'expect($1).toBeInstanceOf($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tobeinstanceofclass'
  '.toBeLessThan(number)':
    prefix: 'eless'
    body: 'expect($1).toBeLessThan($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tobelessthannumber'
  '.toBeLessThanOrEqual(number)':
    prefix: 'elessor'
    body: 'expect($1).toBeLessThanOrEqual($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tobelessthanorequalnumber'
  '.toBeNull()':
    prefix: 'enull'
    body: 'expect($1).toBeNull()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tobenull'
  '.toBeTruthy()':
    prefix: 'etruthy'
    body: 'expect($1).toBeTruthy()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tobetruthy'
  '.toBeUndefined()':
    prefix: 'eundef'
    body: 'expect($1).toBeUndefined()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tobeundefined'
  '.toContain(value)':
    prefix: 'econ'
    body: 'expect($1).toContain($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tocontainitem'
  '.toContainEqual(value)':
    prefix: 'econeq'
    body: 'expect($1).toContainEqual($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tocontainequalitem'
  '.toEqual(value)':
    prefix: 'eeq'
    body: 'expect($1).toEqual($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#toequalvalue'
  '.toHaveBeenCalled()':
    prefix: 'ecall'
    body: 'expect($1).toHaveBeenCalled()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tohavebeencalled'
  '.toHaveBeenCalledTimes(number)':
    prefix: 'ecallt'
    body: 'expect($1).toHaveBeenCalledTimes($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tohavebeencalledtimesnumber'
  '.toHaveBeenCalledWith(values)':
    prefix: 'ecallw'
    body: 'expect($1).toHaveBeenCalledWith($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tohavebeencalledwitharg1-arg2-'
  '.toHaveLength(number)':
    prefix: 'eleng'
    body: 'expect($1).toHaveLength($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tohavelengthnumber'
  '.toHaveProperty(keyPath, value)':
    prefix: 'eprop'
    body: 'expect($1).toHaveProperty($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tohaveproperty'
  '.toMatch(regexpOrString)':
    prefix: 'emat'
    body: 'expect($1).toMatch($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tomatchregexporstring'
  '.toMatchObject(obj)':
    prefix: 'ematob'
    body: 'expect($1).toMatchObject($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tomatchobjectobject'
  '.toMatchSnapshot(optionalString)':
    prefix: 'ematsnap'
    body: 'expect($1).toMatchSnapshot($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tomatchsnapshotoptionalstring'
  '.toThrow(error)':
    prefix: 'ethr'
    body: 'expect($1).toThrow($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tothrowerror'
  '.toThrowErrorMatchingSnapshot()':
    prefix: 'ethrsn'
    body: 'expect($1).toThrow($2)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#tothrowerrormatchingsnapshot'
  'expect(value)':
    prefix: 'exp'
    body: 'expect($1)$2'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/expect.html#expectvalue'
  'expect.anything()':
    prefix: 'eanyt'
    body: 'expect.anything($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/en/expect.html#expectanything'
  'expect.any()':
    prefix: 'eany'
    body: 'expect.any($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/en/expect.html#anyconstructor'
  'expect.arrayContaining(array)':
    prefix: 'earrc'
    body: 'expect.arrayContaining($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/en/expect.html#expectarraycontainingarray'
  'expect.assertions(value)':
    prefix: 'expa'
    body: 'expect.assertions($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/en/expect.html#expectassertionsnumber'
  'expect.hasAssertions()':
    prefix: 'exph'
    body: 'expect.hasAssertions()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/en/expect.html#expecthasassertions'
  'expect.objectContaining(object)':
    prefix: 'eobjc'
    body: 'expect.objectContaining($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/en/expect.html#expectobjectcontainingobject'
  'expect.stringContaining(string)':
    prefix: 'estrc'
    body: 'expect.stringContaining($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/en/expect.html#expectstringcontainingstring'
  'expect.stringMatching(regexp)':
    prefix: 'estrm'
    body: 'expect.stringMatching($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/en/expect.html#expectstringmatchingregexp'
  # Jest: Mock
  '.mockClear()':
    prefix: 'mclear'
    body: '.mockClear()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#mockfnmockclear'
  '.mockImplementation(fn)':
    prefix: 'mimpl'
    body: '.mockImplementation($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#mockfnmockimplementationfn'
  '.mockImplementationOnce(fn)':
    prefix: 'mimplonce'
    body: '.mockImplementationOnce($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#mockfnmockimplementationoncefn'
  '.mockReset()':
    prefix: 'mreset'
    body: '.mockReset()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#mockfnmockreset'
  '.mockReturnThis()':
    prefix: 'mrett'
    body: '.mockReturnThis()'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#mockfnmockreturnthis'
  '.mockReturnValue(value)':
    prefix: 'mretval'
    body: '.mockReturnValue($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#mockfnmockreturnvaluevalue'
  '.mockReturnValueOnce(value)':
    prefix: 'mretvalo'
    body: '.mockReturnValueOnce($1)'
    descriptionMoreURL: 'https://facebook.github.io/jest/docs/jest-object.html#mockfnmockreturnvalueoncevalue'
  # Cypress

  # Vuex
  'Vuex Store':
    prefix: 'vstore'
    body: '''
    import Vue from 'vue'
    import Vuex from 'vuex'

    Vue.use(Vuex)

    export const store = new Vuex.Store({
      state: {
        ${1:key}: ${2:value}
      }
    })
    '''
  'Vuex Getters':
    prefix: 'vgetter',
    body: '''
    getters: {
      ${1:value}: state => state.${1:value}
    }
    '''
  'Vuex Mutation':
    prefix: 'vmutation',
    body: '''
    mutations: {
      ${1:updateValue}(state, ${3:payload}) {
        state.${2:value} = ${3:payload}
      }
    }
    '''
  'Vuex Action':
    prefix: 'vaction'
    body: '''
    actions: {
      ${1:updateValue}({commit}, ${2:payload}) {
        commit('${1:updateValue}', ${2:payload})
      }
    }
    '''
  'Vue Import Vuex Store':
    prefix: 'vstore-import'
    body: 'import { store } from \'./store/store\''

'.text.html.vue':
  # Vue
  'Vue data':
    prefix: 'vdata'
    body: '''
    data() {
      return {
        ${1:key}: '${2:value}'
      }
    },
    '''
    'description': 'Vue Component Data'
  'Vue Methods':
    prefix: 'vmethod'
    body: '''
    methods: {
      ${1:name}() {
        ${0}
      }
    },
    '''
    'description': 'vue method'
  'Vue Computed':
    prefix: 'vcomputed'
    body: '''
    computed: {
      ${1:name}() {
        return this.${2:data} ${0}
      }
    },
    '''
    'description': 'computed value'
  'Vue Watchers':
    prefix: 'vwatcher'
    body: '''
    watch: {
      ${1:name}(${2:newValue}, ${3:oldValue}) {
        ${0}
      }
    },
    '''
    'description': 'vue watcher'
  'Vue Props Default':
    prefix: 'vprops'
    body: '''
    props: {
      ${1:propName}: {
        type: ${2:String},
        default: () => ${0}
      },
    },
    '''
    'description': 'Vue Props with Default'
  'Vue Prop Default':
    prefix: 'vprop'
    body: '''
    ${1:propName}: {
      type: ${2:String},
      default: () => ${0}
    },
    '''
    'description': 'Vue Prop Default'
  'Vue Prop Required':
    prefix: 'vpropr'
    body: '''
    ${1:propName}: {
      type: ${2:String},
      required: true
    },
    '''
    'description': 'Vue Prop Required'
  'Vue Import File':
    prefix: 'vimport'
    body: 'import ${1:New} from \'./components/${1:New}.vue\''
  'Vue Import into the Component':
    prefix: 'vimport-c'
    body: '''
    components: {
      ${1:New},
    },
    '''
    'description': 'Import one component into another, within export statement'
  'Vue Import Export':
    prefix: 'vimport-export'
    body: '''import ${1:Name} from '~components/${1:Name}.vue'

    export default {
      components: {
        ${1:Name},
      }
    }
    '''
    description: 'import a component and include it in export default'
  'Vue Mixin':
    prefix: 'vmixin'
    body: '''
    const ${1:mixinName} = {
      mounted() {
        console.log('hello from mixin!')
      }
    },
    '''
  'Vue Use Mixin':
    prefix: 'vmixin-use'
    body: 'mixins: [${1:mixinName}]'
  'Vue Custom Directive':
    prefix: 'Vue.directive'
    body: '''
    Vue.directive('${1:directiveName}', {
      bind(el, binding, vnode) {
        el.style.${2:arg} = binding.value.${2:arg}
      }
    }),
    '''
  'Vue Transition Methods with JavaScript Hooks':
    prefix: 'vanimhook-js'
    body: '''
    beforeEnter(el) {
      console.log('beforeEnter')
    },
    enter(el, done) {
      console.log('enter')
      done()
    },
    beforeLeave(el) {
      console.log('beforeLeave')
    },
    leave(el, done) {
      console.log('leave')
      done()
    },
    '''
  'Vue Commit Vuex Store in Methods':
    prefix: 'vcommit'
    body: '''
    ${1:mutationName}() {
      this.$store.commit('${1:mutationName}', ${2:payload})
    },
    '''
  'Vue Dispatch Vuex Store in Methods':
    prefix: 'vdispatch'
    body: '''
    ${1:actionName}() {
      this.$store.dispatch('${1:actionName}', ${2:payload})
    },
    '''
  'Vue Single File Component':
    prefix: 'vue'
    body: '''
      <template>
        .$1
      </template>

      <script>
        export default {
          name: '$2'
        }
      </script>

      <style scoped>
      </style>
    '''
